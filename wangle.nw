@page overview Overview

up: @ref index | next: @ref implementation

@section terminology Terminology

wangle is a simple literate-programming tool in the style of
[noweb](http://www.cs.tufts.edu/~nr/noweb), which generates the
documentation using Markdown formatting.
web, weave, tangle
(ref Wikipedia)
(ref noweb)



@page implementation Implementation

previous: @ref overview | up: @ref index | next: @ref control

Contents

- @ref cli
- @ref structure
- @ref errors

@page cli Command-Line Interface

up: @ref implementation | next: @ref structure

[nim version](https://github.com/docopt/docopt.nim)

<<usage>>=
const usage = """
wangle - a minimal Literate Programming tool in the style of noweb

Usage:
  wangle weave WEB [OUTPUT]
  wangle tangle WEB CHUNK [OUTPUT]
  wangle roots WEB
  wangle [options]

Options:
  -h, --help    Show this message
"""

@

<<cli>>=

<<usage>>

try:
  var theWeb: Web
  let args = docopt(usage)
  <<build the web>>
  <<handle commands>>
  quit(QuitSuccess)

except WangleError:
  stderr.write(getCurrentExceptionMsg())
  quit(QuitFailure)
@

<<patterns>>=
let
  CODE_HEADER*  = re"^<<(?<name>[^>]*)>>=$"
  CODE_INCLUDE* = re"^(?<prefix>.*)<<(?<name>[^>]*)>>(?<suffix>.*)$"
  CODE_TRAILER* = re"^@$"
@

@page structure Data Structures

previous: @ref cli | up: @ref implementation | next: @ref errors

@startuml

class Chunk {
  +name
  -line
  -body
  +newChunk()
  +add(text)
  +isCode()
  +pairs()
  +inclusions()
  +weave()

}

class Clump {
  -chunks
  +included
  +newClump()
  +add(Chunk)
  +pairs()
  +inclusions()
}

class Context {
  +prefix
  +name
  +suffix
  -line
  -kind
  +newContext(name)
  +newContext(line, match, context)
  +contains(name)
  +traceback()
  -info()
}

class Web {
  -doc
  -code
  +newWebFrom()
  +roots()
  +weave(output)
  +tangle(name, output)
}

Clump o- Chunk
Web *-- Clump
Web *-- Chunk
Web *-- Context

@enduml

@page errors Error Handling

previous: @ref structure | up: @ref implementation | next: @ref control

<<exception type>>=
type WangleError* = object of Exception
@

@page control Control Flows

previous: @ref implementation | up: @ref index | next: @ref appendix

Contents:
- @ref initialisation
- @ref roots
- @ref weave
- @ref tangle

<<common types>>=
type NumberedText* = tuple[line: int, text: string]
@

<<chunk type>>=
type Chunk* = ref object
  line:  int
  name*: string
  body:  seq[string]
@

<<chunk procs>>=
proc newChunk*(line: int, name: string = ""): Chunk =
  new(result)
  result.line = line
  result.name = name
  result.body = newSeq[string]()

@

<<chunk procs>>=
proc isCode*(self: Chunk): bool =
  result = (len(self.name) > 0)

@

<<chunk procs>>=
proc add*(self: Chunk, text: string) =
  self.body.add(text)

@

<<chunk procs>>=
iterator pairs*(self: Chunk): NumberedText =
  var line = self.line
  for text in self.body:
    yield (line, text)
    line += 1

@

<<clump type>>=
type Clump* = ref object
  chunks:     seq[Chunk]
  included*:  int
@

<<clump procs>>=
proc newClump*(): Clump =
  new(result)
  result.chunks = newSeq[Chunk]()
  result.included = 0

@

<<clump procs>>=
proc add*(self: Clump, chunk: Chunk) =
  self.chunks.add(chunk)

@

<<clump procs>>=
iterator pairs*(self: Clump): NumberedText =
  for chunk in self.chunks:
    for line, text in chunk:
      yield (line, text)

@

<<web type>>=
type Web* = ref object
  doc:  seq[Chunk]
  code*: Table[string, Clump]
@

<<web procs>>=
proc `[]`*(self: Web, name: string): Clump =
  if name notin self.code:
    self.code[name] = newClump()
  result = self.code[name]

@

<<web procs>>=
proc contains*(self: Web, name: string): bool =
  result = self.code.contains(name)

@


@page initialisation Initialisation

previous: @ref errors | up: @ref control | next: @ref roots

<<build the web>>=
if args["WEB"]:
  let filename = $(args["WEB"])
  let input = newFileStream(filename)
  if input.isNil:
    raise newException(WangleError, &"failed to open {filename}")
  theWeb = newWebFrom(input)
  close(input)

@

<<web procs>>=
proc newWebFrom*(input: Stream): Web =
  result = newWeb()
  result.read(input)
  result.gatherClumps()

@

<<web forward declarations>>=
proc newWeb*(): Web
@
 
<<web procs>>=
proc newWeb*(): Web =
  new(result)
  result.doc = newSeq[Chunk]()
  result.code = initTable[string, Clump]()

@

<<web forward declarations>>=
proc read*(self: Web, input: Stream)
@

<<web procs>>=
proc read*(self: Web, input: Stream) =
  var line = 1
  var current = newChunk(line)
  self.doc.add(current)

  while not atEnd(input):
    let text = input.readLine()
    let docChunk = text.match(CODE_TRAILER)
    let codeChunk = text.match(CODE_HEADER)

    if isSome(docChunk):
      current = newChunk(line)
      self.doc.add(current)

    elif isSome(codeChunk):
      current = newChunk(line + 1, get(codeChunk).captures["name"])
      self.doc.add(current)

    else:
      current.add(text)

    line += 1

@

<<web forward declarations>>=
proc gatherClumps(self: Web)
@

<<web procs>>=
proc gatherClumps(self: Web) =
  for chunk in self.doc:
    if chunk.isCode:
      self[chunk.name].add(chunk)

@

@page roots Roots

previous: @ref initialisation | up: @ref control | next: @ref weave

<<handle commands>>=
if args["roots"]:
  for name in theWeb.roots:
    stdout.writeLine(name)

@

<<web procs>>=
iterator roots*(self: Web): string =
  for includer, clump in self.code:
    for line, includee in clump.inclusions:
      self.code[includee].included += 1
  for name, clump in self.code:
    if clump.included == 0:
      yield name

@

<<clump procs>>=
iterator inclusions*(self: Clump): NumberedText =
  for chunk in self.chunks:
    for line, inclusion in chunk.inclusions:
      yield (line, inclusion)

@

<<chunk procs>>=
iterator inclusions*(self: Chunk): NumberedText =
  var line = self.line
  for text in self.body:
    let codeInclude = text.match(CODE_INCLUDE)
    if isSome(codeInclude):
      yield (line, get(codeInclude).captures["name"])
    line += 1

@

@page weave Weave

previous: @ref roots | up: @ref control | next: @ref tangle

<<handle commands>>=
if args["weave"]:
  var filename: string

  if args["OUTPUT"]:
    filename = $(args["OUTPUT"])
  else:
    filename = changeFileExt(os.extractFilename($(args["WEB"])), "md")

  let output = newFileStream(filename, fmWrite)
  if isNil(output):
    raise newException(WangleError, &"failed to open {filename}")
  the_web.weave(output)
  close(output)
  
@

<<web procs>>=
proc weave*(self: Web, output: Stream) =
  for chunk in self.doc:
    chunk.weave(output)

@

<<chunk procs>>=
proc weave*(self: Chunk, output: Stream) =
  if self.isCode:
    output.writeline("```")
    output.writeLine("<<" & self.name & ">" & ">=")
    for text in self.body:
      output.writeLine(text)
    output.writeLine("```")
  else:
    for text in self.body:
      output.writeLine(text)

@

@page tangle Tangle

previous: @ref weave | up: @ref index | next: @ref appendix

@section Overview

Tangling in the term used for extracting a clump of code into a text file.

The clump is identified by the CHUNK parameter (maybe rename this!) 
and by default the code will be written to a file with the same name.

The output filename can be given explicitly by the optional OUTPUT
parameter.

<<handle commands>>=
if args["tangle"]:
  var filename: string

  if args["OUTPUT"]:
    filename = $(args["OUTPUT"])
  else:
    filename = $(args["CHUNK"])

  let output = newFileStream(filename, fmWrite)
  if isNil(output):
    raise newException(WangleError, &"failed to open {filename}")

  the_web.tangle($args["CHUNK"], output)

  close(output)
  
@

@section Context

<<context type>>=
type Context* = ref object
  prefix*: string
  name*:   string
  suffix*: string
  line:    int
  context: Context

@

<<context procs>>=
proc newContext(name: string): Context =
  new(result)
  result.prefix  = ""
  result.name    = name
  result.suffix  = ""
  result.context = nil

@

<<context procs>>=
proc newContext(
  line:    int,
  match:   RegexMatch,
  context: Context
): Context =
  new(result)
  result.line    = line
  result.context = context
  result.prefix  = context.prefix & match.captures["prefix"]
  result.name    = match.captures["name"]
  result.suffix  = match.captures["suffix"] & context.suffix

@

Since code clumps can include other code clumps (which may in turn
include yet more clumps), tangling is necessarily a recursive process.

@section Tangling

The `tangle` method is just a simple wrapper to start the process 
from the top.

We will use a 'Context` data structure to help keep track of the
recursion, see below for details.

<<web procs>>=
proc tangle*(self: Web, name: string, output: Stream) =

  if name notin self.code:
    raise newException(WangleError, &"<{name}> not found")

  self.tangleClump(newContext(name), output)

@

`tangleClump` is the actual recursive bit.

<<web forward declarations>>=
proc tangleClump(self: Web, context: Context, output: Stream)

@

<<web procs>>=
proc tangleClump(
  self:    Web,
  context: Context,
  output:  Stream
) =
  for line, text in self[context.name]:

    let codeInclude = text.match(CODE_INCLUDE)
    if isSome(codeInclude):
      <<handle an include>>
    else:
      output.writeLine(context.prefix & text & context.suffix)

@

<<handle an include>>=
let match = get(codeInclude)
let includee = match.captures["name"]
if includee in context:
  <<raise an error for a circular include>>
else:
  self.tangleClump(newContext(line, match, context), output)
@

The 'contains' procedure allow the use of the 'in' operator 
in the code above.

<<context procs>>=
proc contains*(self: Context, name: string): bool =
  if name == self.name:
    result = true
  elif self.context == nil:
    result = false
  else:
    result = self.context.contains(name)

@

@section xxx Error Handling

<<raise an error for a circular include>>=
var message = @[
  &"circular inclusion of <{includee}>",
  &"included in <{context.name}> at line {line}"
]
for text in context.traceback:
  message.add(text)
raise newException(WangleError, strutils.join(message, "\n"))

@

<<context procs>>=
iterator traceback*(self: Context): string =
  yield self.info
  var context = self.context
  while context.context != nil:
    yield context.info
    context = context.context

@

<<context forward declarations>>=
proc info(self: Context): string
@

<<context procs>>=
proc info(self: Context): string =
  result = &"included in <{self.context.name}> at line {self.line}"

@

previous: @ref weave | up: @ref index | next: @ref appendix

@page appendix Appendix

previous: @ref control | up: @ref index

contents

- @ref licence
- @ref files

@page licence Licence

previous: @ref tangle | up: @ref appendix | next: @ref files

<<LICENCE>>=
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org>
@

@page files File Structure

previous: @ref licence | up: @ref appendix 

@dot

digraph imports {
  rankdir=LR
  node[fontname=Helvetica,fontsize=10]
  chunk[label="chunk.nim"]
  clump[label="clump.nim"]
  web[label="web.nim"]
  cli[label="wangle.nim"]
  patterns[label="patterns.nim"]

  subgraph std {
    rank=same
    node[shape=box,width=1.0,height=0.3]
    docopt
    nre
    os
    streams
    strformat
    strutils
    tables
  }

  chunk -> streams
  chunk -> patterns
  cli -> os
  cli -> streams
  cli -> strformat
  cli -> docopt
  cli -> web
  clump -> chunk
  patterns -> nre
  web -> streams
  web -> strformat
  web -> strutils
  web -> tables
  web -> clump
  web -> chunk
  web -> patterns
}
@enddot

<<wangle.nim>>=
# <<LICENCE>>
import os
import streams
import strformat
import docopt
import wanglepkg/web

<<cli>>
@

Everywhere that the patterns are used, you will need the `nre` package
to process them, so we might as well export it here, and save the users
from havinf to import it themselves.

I don't know what the problem with `toSeq` is, but the doc. suggests
excluding it, so I did.

<<wanglepkg/patterns.nim>>=
# <<LICENCE>>
import nre except toSeq
export nre

<<patterns>>
@


<<wanglepkg/chunk.nim>>=
# <<LICENCE>>
# import nre
import streams

import patterns

<<common types>>
<<chunk type>>

<<chunk procs>>
@

<<wanglepkg/clump.nim>>=
# <<LICENCE>>
import chunk

<<clump type>>

<<clump procs>>
@

<<wanglepkg/web.nim>>=
# <<LICENCE>>
import streams
import strformat
import strutils
import tables

import clump
import chunk
import patterns
<<exception type>>
<<context type>>
<<context forward declarations>>
<<context procs>>
<<web type>>

<<web forward declarations>>

<<web procs>>
@
